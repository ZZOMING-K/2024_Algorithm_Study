문제 링크 : boj.kr/1874

문제 요약 : LIFO특징을 갖는 스택에 수를 오름차순으로 push하거나 pop하면서 주어진 수열을 만들 수 있는지, 있다면 push와 pop을 어떤 순서로 해야 하는지 출력한다.

접근 방법 : 스택에는 숫자가 오름차순으로 push된다. 
스택은 LIFO 특징을 가지기 때문에 특정한 수를 pop하기 위해서는 그 수보다 작은 모든 숫자들이 스택에 push되어있어야 하며, 그 수보다 큰 수는 스택에 존재해선 안 된다.
수열을 구성하는 숫자가 하나씩 입력되므로 현재 입력된 수와 이전에 입력된 수 크기를 비교하여 push해야하는지 pop해야하는지 판단할 수 있다.
이전에 입력된 수 보다 큰 수가 입력되었다면 해당 수가 스택에 들어갈 때 까지 push를 수행한다. 그 후 pop하여 입력된 수를 스택에서 꺼낸다.
이전에 입력된 수 보다 작은 수가 입력되었다면 스택에서 pop을 수행하여 입력된 수와 비교해야 한다. pop된 수와 입력된 수가 다르다면, 스택 자료구조로 해당 수열을 만들 수 없다는 의미이므로 NO를 출력한다.

예시 : 
4 3 6 8 7 5 2 1을 만들 수 있는지 알아보자.
1. 맨 처음 수인 4을 출력하기 위해 1, 2, 3, 4를 차례로 스택에 push한다. sign배열에도 차례로 '+'를 push한다.
스택 상황 : [1, 2, 3, 4]
sign 상황 : [+, +, +, +]

2. prev 변수에 4를 넣고, 스택에서 pop을 수행한다. sign배열에 '-'를 push한다.
스택 상황 : [1, 2, 3], prev = 4
sign 상황 : [+, +, +, +, -]

3. prev변수와 현재 입력받은 3을 비교한다. 3이 더 작으므로 스택에서 pop하고, 그 값이 3인지 확인한다. prev변수에 3을 넣는다. sign배열에 '-'를 push한다.
스택 상황 : [1, 2] pop된 값과 입력된 값이 3으로 같으므로 조건에 위배되지 않는다. prev = 3
sign 상황 : [+, +, +, +, -, -]

4. prev변수와 현재 입력받은 6을 비교한다. 6이 더 크므로 6까지 스택에 push한다. sign배열에도 차례로 '+'를 push한다.
스택 상황 : [1, 2, 5, 6]
sign 상황 : [+, +, +, +, -, -, +, +]

5. prev 변수에 6을 넣고, 스택에서 pop을 수행한다. sign배열에 '-'를 push한다.
스택 상황 : [1, 2, 5], prev = 6
sign 상황 : [+, +, +, +, -, -, +, +, -]

6. prev변수와 현재 입력받은 8을 비교한다. 8이 더 크므로 8까지 스택에 push한다. sign배열에도 차례로 '+'를 push한다.
스택 상황 : [1, 2, 5, 7, 8]
sign 상황 : [+, +, +, +, -, -, +, +, -, +, +]

7. prev변수에 8을 넣고, 스택에서 pop을 수행한다. sign배열에 '-'를 push한다.
스택 상황 : [1, 2, 5, 7], prev = 8
sign 상황 : [+, +, +, +, -, -, +, +, -, +, +, -]

8. prev변수와 현재 입력받은 7을 비교한다. 7이 더 작으므로 스택에서 pop하고, 그 값이 7인지 확인한다. prev변수에 7을 넣는다. sign배열에 '-'를 push한다.
스택 상황 : [1, 2, 5], pop된 값과 입력된 값이 7로 같으므로 조건에 위배되지 않는다. prev = 7
sign 상황 : [+, +, +, +, -, -, +, +, -, +, +, -, -]

9. prev변수와 현재 입력받은 5를 비교한다. 5가 더 작으므로 스택에서 pop하고, 그 값이 5인지 확인한다. prev변수에 5를 넣는다. sign배열에 '-'를 push한다.
스택 상황 : [1, 2], pop된 값과 입력된 값이 5로 같으므로 조건에 위배되지 않는다. prev = 5
sign 상황 : [+, +, +, +, -, -, +, +, -, +, +, -, -, -]

10. prev변수와 현재 입력받은 2를 비교한다. 2가 더 작으므로 스택에서 pop하고, 그 값이 2인지 확인한다. prev변수에 2를 넣는다. sign배열에 '-'를 push한다.
스택 상황 : [1], pop된 값과 입력된 값이 2로 같으므로 조건에 위배되지 않는다. prev = 2
sign 상황 : [+, +, +, +, -, -, +, +, -, +, +, -, -, -, -]

11. prev변수와 현재 입력받은 1을 비교한다. 1이 더 작으므로 스택에서 pop하고, 그 값이 1인지 확인한다. prev변수에 1을 넣는다. sign배열에 '-'를 push한다.
스택 상황 : [], pop된 값과 입력된 값이 1로 같으므로  조건에 위배되지 않는다. prev = 1
sign 상황 : [+, +, +, +, -, -, +, +, -, +, +, -, -, -, -, -]

12. 입력된 수열을 완료하였으므로 sign배열을 차례로 출력한다.