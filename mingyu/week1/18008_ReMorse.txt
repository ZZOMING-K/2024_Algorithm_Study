문제 정리 :
특정 문장을 가장 신속하게 모스부호로 전달할 수 있는 체계를 만드는 문제이다.
1. 문장 안의 문자는 dot과 dash로 표현된다.
2. dot은 1초가, dash는 3초가 소모된다.
3. 문자를 표현하기 위해 사용되는 dot과 dash를 구분하기 위해 1초가 소모된다. (A라는 문자를 dot dot으로 번역했을 때 A를 전송하기 위해 dot dot을 보낸다. 이때 dot 사이의 간격은 1초이다.)
4. 문장 속 문자를 구분하기 위해 3초가 소모된다. (A를 dot으로 번역하였을 때 AA를 전송하기 위해 dot   dot을 보낸다. 이때 dot 사이의 간격은 3초이다.)

접근 방법 :
우선 최대한 신속하게 보내기 위해 걸리는 시간순으로 모스부호 표현법을 정렬해보자.
모스부호 시간이 가장 적게 걸리는 표현법 랭킹 :
1위 		
		dot		1초
공동 2위 		
		dot dot		3초
		dash		3초		
공동 3위 		
		dot dot dot	5초
		dot dash		5초
		dash dot		5초
공동 4위 
		dot dot dot dot	7초
		dot dot dash	7초
		dot dash dot	7초
		dash dot dot	7초
		dash dash	7초
...

보내고자 하는 문장이 1개의 문자로 이루어져있다면 1위인 dot 만을 사용해 전송해야 하고,
2개의 문자로 이루어져있다면 1위인 dot과 2위인 dot dot, dash중 하나를 선택하여 전송하는 게 가장 빠를것이다.

또한, 문장 내에서 많이 등장한 문자일수록 걸리는 시간이 적어야 문장을 가장 빠르게 전송할 수 있다.

예를 들어 ICPC라는 문장을 보내려고 할 때, 문자가 3개 등장하였으므로 필요한 모스부호의 종류도 3가지이다.
I를 dot으로, C를 dot dot으로, P를 dash로 표현했다면, dot(1초) + 문자사이(3초) + dot dot(3초) + 문자사이(3초) + dash(3초) + 문자사이(3초) + dot dot(3초) 총 19초가 필요하지만,
C를 dot으로, I를 dot dot으로, P를 dash로 표현했다면, dot dot(3초) + 문자사이(3초) + dot(1초) + 문자사이(3초) + dash(3초) + 문자사이(3초) + dot(1초) 총 17초가 필요하다.

따라서 문장안에서 특정 문자가 몇 번 등장했는지 세고, 
많이 등장한 순으로 시간이 적게 걸리는 표현법을 할당해준다면
가장 빠르게 문장을 전송할 수 있다.


특정 시간에 표현 가능한 모스부호 종류의 개수를 안다면 
많이 등장한 문자 순서대로 표현법을 배정할 때 
몇 초가 걸리는 표현법이 최선인지 알 수 있다.

위의 랭킹을 다시 한번 확인해보자. dot dot과 dash는 소요되는 시간이 같아 서로 치환할 수 있다.
특정 시간에 등장 가능한 dash의 최대값을 안다면 특정 시간에 표현 가능한 모스부호 종류의 개수를 알 수 있다.
dash가 0개인 경우부터 dash가 1개인경우, dash가 2개인 경우 ... dash가 최대인 경우 에서 각 경우의 수를 전부 더하는 방식을 사용한다.


1)
dash 최대값에 따른 시간의 최소값(dash는 3초 초모, 공백은 1초 소모):
-		3초 	(3)
- -		7초 	(3 + 1 + 3)
- - -		11초	(3 + 1 + 3 + 1 + 3)
- - - -		15초	(3 + 1 + 3 + 1 + 3 + 1 + 3)
...
3초에서 시작하여 4초가 늘어날 때 마다 dash의 최대값이 1 늘어난다.		

2) dash가 0개인 경우 dot이 몇 개 들어갈 수 있는지 확인하기 위해 dot 갯수에 따른 시간 변화를 알아보자.
dot 최대값에 따른 시간의 최소값 (dot은 1초 소모, 공백은 1초 소모):
. 		1초	(1)
. .		3초	(1 + 1 + 1)
. . .		5초	(1 + 1 + 1 + 1 + 1)
. . . .		7초	(1 + 1 + 1 + 1 + 1 + 1 + 1)
...
1초에서 시작하여 2초가 늘어날 때 마다 dot의 최대값이 1 늘어난다.		(초 // 2 + 1의 공식으로 구할 수 있음)

3)
combination : 서로 다른 n개중에 r개를 선택하는 경우의 수, dot 다섯 개와 dash 두 개로 표현할 수 있는 모스부호 종류의 갯수를 찾는 문제는 7개의 카드 중에 2개를 선택하는 경우의 수를 찾는 문제와 같다.
동일한 시간에서 모스부호를 표현할 때, dash를 한 개 늘리는 경우 dot은 두 개 줄어든다. ( dot dot = dash , 둘 다 3초로 동일)

예시 1)
7초에서 나올 수 있는 경우의 수 :
7초안에 dot은 최대 4개, dash는 최대 2개 나올 수 있다.
따라서 dash가 0개인 경우의 수, 1개인 경우의 수, 2개인 경우의 수를 더하면 7초로 표현 가능한 모스부호 종류 개수의 합을 알 수 있다.

dash가 0개인 경우 : 4개중에 0개를 선택하는 경우 -> 4 combination 0 = 1		
1>  . . . .		(dot dot dot dot)
dash가 1개인 경우 : 3개중에 1개를 선택하는 경우 -> 3 combination 1 = 3		
1 > . . -		(dot dot dash)
2 > . - .		(dot dash dot)
3 > - . .		(dash dot dot)
dash가 2개인 경우 : 2개중에 2개를 선택하는 경우 -> 2 combination 2 = 1
1 > - -		(dash dash)
dash는 최대 2개 가능하므로 이상 5개가 7초에 표현가능한 모든 모스부호의 종류들이다
예시 2)
13초에서 나올 수 있는 경우의 수:
13초안에 dot은 최대 7개, dash는 최대 3개 나올 수 있다.
따라서 dash가 0개인 경우의 수, 1개인 경우의 수, 2개인 경우의 수, 3개인 경우의 수를 더하면 13초로 표현 가능한 모스부호 종류 개수의 합을 알 수 있다.

dash가 0개인 경우 : 7개중에 0개를 선택하는 경우 -> 7 combination 0 = 1
1> . . . . . . .	(dot dot dot dot dot dot dot)
dash가 1개인 경우 : 6개중에 1개를 선택하는 경우 -> 6 combination 1 = 6
1> . . . . . -	(dot dot dot dot dot dash)
2> . . . . - .	(dot dot dot dot dash dot)
3> . . . - . .	(dot dot dot dash dot dot)
4> . . - . . .	(dot dot dash dot dot dot)
5> . - . . . .	(dot dash dot dot dot dot)
6> - . . . . .	(dash dot dot dot dot dot)
dash가 2개인 경우 : 5개중에 2개를 선택하는 경우 -> 5 combination 2 = 10
1> . . . - -	(dot dot dot dash dash)
2> . . - . -	(dot dot dash dot dash)
3> . - . . -	(dot dash dot dot dash)
4> - . . . -	(dash dot dot dot dash)
5> . . - - .	(dot dot dash dash dot)
6> . - . - .	(dot dash dot dash dot)
7> - . . - .	(dash dot dot dash dot)
8> . - - . .	(dot dash dash dot dot)
9> - . - . .	(dash dot dash dot dot)
10> - - . . .	(dash dash dot dot dot)
dash가 3개인 경우 : 4개중에 3개를 선택하는 경우 -> 4 combination 3 = 4
1> . - - -		(dot dash dash dash)
2> - . - -		(dash dot dash dash)
3> - - . -		(dash dash dot dash)
4> - - - .		(dash dash dash dot)
dash는 최대 3개 가능하므로 이상 21개가 13초내에 표현할 수 있는 모든 모스부호 종류이다.


결론 : dash가 하나 늘어날 수록 dot이 두 개 줄어듬, 전체 개수(dot과 dash의 합)는 -1 (-2 + 1 이므로)
dash 최대값을 미리 구해놓고, dash수를 늘려가며 최대값이 될 때 까지 반복해보자.